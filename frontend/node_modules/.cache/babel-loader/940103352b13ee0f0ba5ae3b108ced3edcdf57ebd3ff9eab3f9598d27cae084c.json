{"ast":null,"code":"// geoprumo/frontend/src/services/api.js\nimport axios from'axios';const apiClient=axios.create({baseURL:'http://127.0.0.1:8000/api/v1',headers:{'Content-Type':'application/json'}});const fileToBase64=file=>new Promise((resolve,reject)=>{const reader=new FileReader();reader.readAsDataURL(file);reader.onload=()=>resolve(reader.result.split(',')[1]);reader.onerror=error=>reject(error);});export const optimizeRouteData=async payload=>{const filesAsBase64=await Promise.all(payload.files.map(async f=>({filename:f.name,content:await fileToBase64(f)})));const requestBody={files:filesAsBase64,links:payload.links,texts:payload.texts,existing_points:payload.existing_points||[],options:{optimization_mode:'online'}};try{const response=await apiClient.post('/process/optimize',requestBody);return response.data;}catch(error){if(error.response)throw new Error(error.response.data.detail||'Erro no servidor.');if(error.request)throw new Error('Não foi possível se comunicar com o servidor.');throw new Error('Erro ao preparar a requisição.');}};export const enrichRouteWithAI=async points=>{try{const response=await apiClient.post('/process/enrich-with-ai',{points});return response.data;}catch(error){if(error.response)throw new Error(error.response.data.detail||'Erro no servidor de IA.');if(error.request)throw new Error('Não foi possível se comunicar com o servidor de IA.');throw new Error('Erro ao preparar a requisição para IA.');}};export const exportRouteFile=async(format,points)=>{try{const response=await apiClient.post(\"/export/\".concat(format),points,{responseType:'blob'});const url=window.URL.createObjectURL(new Blob([response.data]));const link=document.createElement('a');link.href=url;const fileExtension=format==='mymaps'?'csv':format;let fileName=\"rota_otimizada.\".concat(fileExtension);const contentDisposition=response.headers['content-disposition'];if(contentDisposition){const fileNameMatch=contentDisposition.match(/filename=\"(.+)\"/);if(fileNameMatch.length===2)fileName=fileNameMatch[1];}link.setAttribute('download',fileName);document.body.appendChild(link);link.click();link.remove();}catch(error){console.error(\"Erro ao exportar para \".concat(format,\":\"),error);throw new Error(\"N\\xE3o foi poss\\xEDvel exportar o arquivo \".concat(format.toUpperCase(),\".\"));}};// NOVO: Função para buscar endereço/coordenadas\nexport const geocodeSearch=async query=>{try{// A query é passada como um parâmetro de URL, ex: /search?q=Praça Sete\nconst response=await apiClient.get(\"/geocode/search\",{params:{q:query}});return response.data;}catch(error){if(error.response)throw new Error(error.response.data.detail||'Endereço não encontrado.');if(error.request)throw new Error('Não foi possível se comunicar com o servidor.');throw new Error('Erro ao preparar a requisição de busca.');}};// NOVA FUNÇÃO DE AUTOCOMPLETE\nexport const autocompleteAddress=async query=>{if(query.length<3)return[];try{const response=await apiClient.get(\"/geocode/autocomplete\",{params:{q:query}});return response.data;}catch(error){console.error(\"Erro no autocomplete:\",error);return[];// Retorna vazio em caso de erro\n}};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","optimizeRouteData","payload","filesAsBase64","all","files","map","f","filename","name","content","requestBody","links","texts","existing_points","options","optimization_mode","response","post","data","Error","detail","request","enrichRouteWithAI","points","exportRouteFile","format","concat","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","fileExtension","fileName","contentDisposition","fileNameMatch","match","length","setAttribute","body","appendChild","click","remove","console","toUpperCase","geocodeSearch","query","get","params","q","autocompleteAddress"],"sources":["C:/Users/mathe/Desktop/GeoPrumoPro/frontend/src/services/api.js"],"sourcesContent":["// geoprumo/frontend/src/services/api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api/v1',\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\nconst fileToBase64 = (file) => new Promise((resolve, reject) => {\r\n  const reader = new FileReader();\r\n  reader.readAsDataURL(file);\r\n  reader.onload = () => resolve(reader.result.split(',')[1]);\r\n  reader.onerror = (error) => reject(error);\r\n});\r\n\r\nexport const optimizeRouteData = async (payload) => {\r\n  const filesAsBase64 = await Promise.all(payload.files.map(async f => ({ filename: f.name, content: await fileToBase64(f) })));\r\n  const requestBody = { files: filesAsBase64, links: payload.links, texts: payload.texts, existing_points: payload.existing_points || [], options: { optimization_mode: 'online' } };\r\n  try {\r\n    const response = await apiClient.post('/process/optimize', requestBody);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor.');\r\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor.');\r\n    throw new Error('Erro ao preparar a requisição.');\r\n  }\r\n};\r\n\r\nexport const enrichRouteWithAI = async (points) => {\r\n  try {\r\n    const response = await apiClient.post('/process/enrich-with-ai', { points });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor de IA.');\r\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor de IA.');\r\n    throw new Error('Erro ao preparar a requisição para IA.');\r\n  }\r\n};\r\n\r\nexport const exportRouteFile = async (format, points) => {\r\n  try {\r\n    const response = await apiClient.post(`/export/${format}`, points, { responseType: 'blob' });\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    const fileExtension = format === 'mymaps' ? 'csv' : format;\r\n    let fileName = `rota_otimizada.${fileExtension}`;\r\n    const contentDisposition = response.headers['content-disposition'];\r\n    if (contentDisposition) {\r\n      const fileNameMatch = contentDisposition.match(/filename=\"(.+)\"/);\r\n      if (fileNameMatch.length === 2) fileName = fileNameMatch[1];\r\n    }\r\n    link.setAttribute('download', fileName);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n  } catch (error) {\r\n    console.error(`Erro ao exportar para ${format}:`, error);\r\n    throw new Error(`Não foi possível exportar o arquivo ${format.toUpperCase()}.`);\r\n  }\r\n};\r\n\r\n// NOVO: Função para buscar endereço/coordenadas\r\nexport const geocodeSearch = async (query) => {\r\n  try {\r\n    // A query é passada como um parâmetro de URL, ex: /search?q=Praça Sete\r\n    const response = await apiClient.get(`/geocode/search`, { params: { q: query } });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) throw new Error(error.response.data.detail || 'Endereço não encontrado.');\r\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor.');\r\n    throw new Error('Erro ao preparar a requisição de busca.');\r\n  }\r\n};// NOVA FUNÇÃO DE AUTOCOMPLETE\r\nexport const autocompleteAddress = async (query) => {\r\n  if (query.length < 3) return [];\r\n  try {\r\n    const response = await apiClient.get(`/geocode/autocomplete`, { params: { q: query } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro no autocomplete:\", error);\r\n    return []; // Retorna vazio em caso de erro\r\n  }\r\n};"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,MAAM,CAAC,CAC7BC,OAAO,CAAE,8BAA8B,CACvCC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,KAAM,CAAAC,YAAY,CAAIC,IAAI,EAAK,GAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CAC9D,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC,CAC1BI,MAAM,CAACG,MAAM,CAAG,IAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1DL,MAAM,CAACM,OAAO,CAAIC,KAAK,EAAKR,MAAM,CAACQ,KAAK,CAAC,CAC3C,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,iBAAiB,CAAG,KAAO,CAAAC,OAAO,EAAK,CAClD,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAb,OAAO,CAACc,GAAG,CAACF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAC,KAAM,CAAAC,CAAC,GAAK,CAAEC,QAAQ,CAAED,CAAC,CAACE,IAAI,CAAEC,OAAO,CAAE,KAAM,CAAAtB,YAAY,CAACmB,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC7H,KAAM,CAAAI,WAAW,CAAG,CAAEN,KAAK,CAAEF,aAAa,CAAES,KAAK,CAAEV,OAAO,CAACU,KAAK,CAAEC,KAAK,CAAEX,OAAO,CAACW,KAAK,CAAEC,eAAe,CAAEZ,OAAO,CAACY,eAAe,EAAI,EAAE,CAAEC,OAAO,CAAE,CAAEC,iBAAiB,CAAE,QAAS,CAAE,CAAC,CAClL,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAjC,SAAS,CAACkC,IAAI,CAAC,mBAAmB,CAAEP,WAAW,CAAC,CACvE,MAAO,CAAAM,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOnB,KAAK,CAAE,CACd,GAAIA,KAAK,CAACiB,QAAQ,CAAE,KAAM,IAAI,CAAAG,KAAK,CAACpB,KAAK,CAACiB,QAAQ,CAACE,IAAI,CAACE,MAAM,EAAI,mBAAmB,CAAC,CACtF,GAAIrB,KAAK,CAACsB,OAAO,CAAE,KAAM,IAAI,CAAAF,KAAK,CAAC,+CAA+C,CAAC,CACnF,KAAM,IAAI,CAAAA,KAAK,CAAC,gCAAgC,CAAC,CACnD,CACF,CAAC,CAED,MAAO,MAAM,CAAAG,iBAAiB,CAAG,KAAO,CAAAC,MAAM,EAAK,CACjD,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAjC,SAAS,CAACkC,IAAI,CAAC,yBAAyB,CAAE,CAAEM,MAAO,CAAC,CAAC,CAC5E,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOnB,KAAK,CAAE,CACd,GAAIA,KAAK,CAACiB,QAAQ,CAAE,KAAM,IAAI,CAAAG,KAAK,CAACpB,KAAK,CAACiB,QAAQ,CAACE,IAAI,CAACE,MAAM,EAAI,yBAAyB,CAAC,CAC5F,GAAIrB,KAAK,CAACsB,OAAO,CAAE,KAAM,IAAI,CAAAF,KAAK,CAAC,qDAAqD,CAAC,CACzF,KAAM,IAAI,CAAAA,KAAK,CAAC,wCAAwC,CAAC,CAC3D,CACF,CAAC,CAED,MAAO,MAAM,CAAAK,eAAe,CAAG,KAAAA,CAAOC,MAAM,CAAEF,MAAM,GAAK,CACvD,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAjC,SAAS,CAACkC,IAAI,YAAAS,MAAA,CAAYD,MAAM,EAAIF,MAAM,CAAE,CAAEI,YAAY,CAAE,MAAO,CAAC,CAAC,CAC5F,KAAM,CAAAC,GAAG,CAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,GAAI,CAAAC,IAAI,CAAC,CAAChB,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CACjE,KAAM,CAAAe,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGR,GAAG,CACf,KAAM,CAAAS,aAAa,CAAGZ,MAAM,GAAK,QAAQ,CAAG,KAAK,CAAGA,MAAM,CAC1D,GAAI,CAAAa,QAAQ,mBAAAZ,MAAA,CAAqBW,aAAa,CAAE,CAChD,KAAM,CAAAE,kBAAkB,CAAGvB,QAAQ,CAAC9B,OAAO,CAAC,qBAAqB,CAAC,CAClE,GAAIqD,kBAAkB,CAAE,CACtB,KAAM,CAAAC,aAAa,CAAGD,kBAAkB,CAACE,KAAK,CAAC,iBAAiB,CAAC,CACjE,GAAID,aAAa,CAACE,MAAM,GAAK,CAAC,CAAEJ,QAAQ,CAAGE,aAAa,CAAC,CAAC,CAAC,CAC7D,CACAP,IAAI,CAACU,YAAY,CAAC,UAAU,CAAEL,QAAQ,CAAC,CACvCJ,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC,CAC/BA,IAAI,CAACa,KAAK,CAAC,CAAC,CACZb,IAAI,CAACc,MAAM,CAAC,CAAC,CACf,CAAE,MAAOhD,KAAK,CAAE,CACdiD,OAAO,CAACjD,KAAK,0BAAA2B,MAAA,CAA0BD,MAAM,MAAK1B,KAAK,CAAC,CACxD,KAAM,IAAI,CAAAoB,KAAK,8CAAAO,MAAA,CAAwCD,MAAM,CAACwB,WAAW,CAAC,CAAC,KAAG,CAAC,CACjF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAO,CAAAC,KAAK,EAAK,CAC5C,GAAI,CACF;AACA,KAAM,CAAAnC,QAAQ,CAAG,KAAM,CAAAjC,SAAS,CAACqE,GAAG,mBAAoB,CAAEC,MAAM,CAAE,CAAEC,CAAC,CAAEH,KAAM,CAAE,CAAC,CAAC,CACjF,MAAO,CAAAnC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOnB,KAAK,CAAE,CACd,GAAIA,KAAK,CAACiB,QAAQ,CAAE,KAAM,IAAI,CAAAG,KAAK,CAACpB,KAAK,CAACiB,QAAQ,CAACE,IAAI,CAACE,MAAM,EAAI,0BAA0B,CAAC,CAC7F,GAAIrB,KAAK,CAACsB,OAAO,CAAE,KAAM,IAAI,CAAAF,KAAK,CAAC,+CAA+C,CAAC,CACnF,KAAM,IAAI,CAAAA,KAAK,CAAC,yCAAyC,CAAC,CAC5D,CACF,CAAC,CAAC;AACF,MAAO,MAAM,CAAAoC,mBAAmB,CAAG,KAAO,CAAAJ,KAAK,EAAK,CAClD,GAAIA,KAAK,CAACT,MAAM,CAAG,CAAC,CAAE,MAAO,EAAE,CAC/B,GAAI,CACF,KAAM,CAAA1B,QAAQ,CAAG,KAAM,CAAAjC,SAAS,CAACqE,GAAG,yBAA0B,CAAEC,MAAM,CAAE,CAAEC,CAAC,CAAEH,KAAM,CAAE,CAAC,CAAC,CACvF,MAAO,CAAAnC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOnB,KAAK,CAAE,CACdiD,OAAO,CAACjD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,EAAE,CAAE;AACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}