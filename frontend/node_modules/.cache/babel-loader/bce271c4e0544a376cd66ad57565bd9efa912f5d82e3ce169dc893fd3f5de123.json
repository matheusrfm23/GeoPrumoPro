{"ast":null,"code":"// geoprumo/frontend/src/services/api.js (versão atualizada)\n\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://127.0.0.1:8000/api/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result.split(',')[1]);\n    reader.onerror = error => reject(error);\n  });\n};\n\n/**\r\n * Envia os dados brutos para o backend para análise e otimização (sem IA).\r\n */\nexport const optimizeRouteData = async payload => {\n  const filesAsBase64 = await Promise.all(payload.files.map(async file => {\n    const content = await fileToBase64(file);\n    return {\n      filename: file.name,\n      content\n    };\n  }));\n  const requestBody = {\n    files: filesAsBase64,\n    links: payload.links,\n    texts: payload.texts,\n    options: {\n      optimization_mode: 'online'\n    }\n  };\n  try {\n    const response = await apiClient.post('/process/optimize', requestBody);\n    return response.data;\n  } catch (error) {\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor.');\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor.');\n    throw new Error('Erro ao preparar a requisição.');\n  }\n};\n\n/**\r\n * Envia uma rota já processada para ser enriquecida com a IA.\r\n */\nexport const enrichRouteWithAI = async points => {\n  try {\n    const response = await apiClient.post('/process/enrich-with-ai', {\n      points\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor de IA.');\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor de IA.');\n    throw new Error('Erro ao preparar a requisição para IA.');\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","optimizeRouteData","payload","filesAsBase64","all","files","map","content","filename","name","requestBody","links","texts","options","optimization_mode","response","post","data","Error","detail","request","enrichRouteWithAI","points"],"sources":["C:/Users/mathe/Desktop/GeoPrumoPro/frontend/src/services/api.js"],"sourcesContent":["// geoprumo/frontend/src/services/api.js (versão atualizada)\r\n\r\nimport axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://127.0.0.1:8000/api/v1',\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\nconst fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result.split(',')[1]);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Envia os dados brutos para o backend para análise e otimização (sem IA).\r\n */\r\nexport const optimizeRouteData = async (payload) => {\r\n  const filesAsBase64 = await Promise.all(\r\n    payload.files.map(async (file) => {\r\n      const content = await fileToBase64(file);\r\n      return { filename: file.name, content };\r\n    })\r\n  );\r\n\r\n  const requestBody = {\r\n    files: filesAsBase64,\r\n    links: payload.links,\r\n    texts: payload.texts,\r\n    options: { optimization_mode: 'online' },\r\n  };\r\n\r\n  try {\r\n    const response = await apiClient.post('/process/optimize', requestBody);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor.');\r\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor.');\r\n    throw new Error('Erro ao preparar a requisição.');\r\n  }\r\n};\r\n\r\n/**\r\n * Envia uma rota já processada para ser enriquecida com a IA.\r\n */\r\nexport const enrichRouteWithAI = async (points) => {\r\n  try {\r\n    const response = await apiClient.post('/process/enrich-with-ai', { points });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) throw new Error(error.response.data.detail || 'Erro no servidor de IA.');\r\n    if (error.request) throw new Error('Não foi possível se comunicar com o servidor de IA.');\r\n    throw new Error('Erro ao preparar a requisição para IA.');\r\n  }\r\n};"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,8BAA8B;EACvCC,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB;AAChD,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAC7B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC;IAC1BI,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1DL,MAAM,CAACM,OAAO,GAAIC,KAAK,IAAKR,MAAM,CAACQ,KAAK,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;EAClD,MAAMC,aAAa,GAAG,MAAMb,OAAO,CAACc,GAAG,CACrCF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAC,MAAOjB,IAAI,IAAK;IAChC,MAAMkB,OAAO,GAAG,MAAMnB,YAAY,CAACC,IAAI,CAAC;IACxC,OAAO;MAAEmB,QAAQ,EAAEnB,IAAI,CAACoB,IAAI;MAAEF;IAAQ,CAAC;EACzC,CAAC,CACH,CAAC;EAED,MAAMG,WAAW,GAAG;IAClBL,KAAK,EAAEF,aAAa;IACpBQ,KAAK,EAAET,OAAO,CAACS,KAAK;IACpBC,KAAK,EAAEV,OAAO,CAACU,KAAK;IACpBC,OAAO,EAAE;MAAEC,iBAAiB,EAAE;IAAS;EACzC,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAM/B,SAAS,CAACgC,IAAI,CAAC,mBAAmB,EAAEN,WAAW,CAAC;IACvE,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACe,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAClB,KAAK,CAACe,QAAQ,CAACE,IAAI,CAACE,MAAM,IAAI,mBAAmB,CAAC;IACtF,IAAInB,KAAK,CAACoB,OAAO,EAAE,MAAM,IAAIF,KAAK,CAAC,+CAA+C,CAAC;IACnF,MAAM,IAAIA,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAOC,MAAM,IAAK;EACjD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAM/B,SAAS,CAACgC,IAAI,CAAC,yBAAyB,EAAE;MAAEM;IAAO,CAAC,CAAC;IAC5E,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACe,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAClB,KAAK,CAACe,QAAQ,CAACE,IAAI,CAACE,MAAM,IAAI,yBAAyB,CAAC;IAC5F,IAAInB,KAAK,CAACoB,OAAO,EAAE,MAAM,IAAIF,KAAK,CAAC,qDAAqD,CAAC;IACzF,MAAM,IAAIA,KAAK,CAAC,wCAAwC,CAAC;EAC3D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}