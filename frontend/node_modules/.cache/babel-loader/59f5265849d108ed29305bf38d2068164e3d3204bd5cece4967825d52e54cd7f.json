{"ast":null,"code":"// geoprumo/frontend/src/services/api.js (adicionar esta função)\n\n// ... (as outras funções permanecem as mesmas) ...\n\n// NOVA FUNÇÃO DE AUTOCOMPLETE\nexport const autocompleteAddress = async query => {\n  if (query.length < 3) return [];\n  try {\n    const response = await apiClient.get(`/geocode/autocomplete`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro no autocomplete:\", error);\n    return []; // Retorna vazio em caso de erro\n  }\n};","map":{"version":3,"names":["autocompleteAddress","query","length","response","apiClient","get","params","q","data","error","console"],"sources":["C:/Users/mathe/Desktop/GeoPrumoPro/frontend/src/services/api.js"],"sourcesContent":["// geoprumo/frontend/src/services/api.js (adicionar esta função)\r\n\r\n// ... (as outras funções permanecem as mesmas) ...\r\n\r\n// NOVA FUNÇÃO DE AUTOCOMPLETE\r\nexport const autocompleteAddress = async (query) => {\r\n  if (query.length < 3) return [];\r\n  try {\r\n    const response = await apiClient.get(`/geocode/autocomplete`, { params: { q: query } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Erro no autocomplete:\", error);\r\n    return []; // Retorna vazio em caso de erro\r\n  }\r\n};"],"mappings":"AAAA;;AAEA;;AAEA;AACA,OAAO,MAAMA,mBAAmB,GAAG,MAAOC,KAAK,IAAK;EAClD,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,EAAE;EAC/B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,SAAS,CAACC,GAAG,CAAC,uBAAuB,EAAE;MAAEC,MAAM,EAAE;QAAEC,CAAC,EAAEN;MAAM;IAAE,CAAC,CAAC;IACvF,OAAOE,QAAQ,CAACK,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}